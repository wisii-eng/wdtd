
	<xsl:template name="barcode-2of5i">
		<xsl:param name="value"/>
		<xsl:param name="string"/>
		<xsl:param name="print-text" select="'true'"/>
		<xsl:param name="addchecksum" select="'false'"/>
		<xsl:param name="module" select="'0.012in'"/>
		<xsl:param name="wide-to-narrow" select="3.0"/>
		<xsl:param name="height" select="'0.25in'"/>
		<xsl:param name="quiet-horizontal" select="'0.24in'"/>
		<xsl:param name="quiet-vertical" select="'0.06in'"/>
		<xsl:param name="font-family" select="'Courier'"/>
		<xsl:param name="font-weight" select="'normal'"/>
		<xsl:param name="font-style" select="'normal'"/>
		<xsl:param name="font-height" select="'8pt'"/>
		<xsl:param name="text-color" select="'black'"/>
		<xsl:param name="text-block" select="'0'"/>
		<xsl:param name="barcode-color" select="'black'"/>
		<xsl:param name="text-char-space" select="'0'"/>
		<xsl:param name="orientation" select="0"/>
		<xsl:if test="string-length($value)=0">
		</xsl:if>
		<xsl:if test="string-length(translate($value,'1234567890',''))!=0">
		</xsl:if>
		<xsl:variable name="value-real">
			<xsl:if test="((string-length($value) + ($addchecksum='true')) mod 2) != 0">0</xsl:if>
			<xsl:value-of select="$value"/>
			<xsl:if test="$addchecksum='true'">
				<xsl:call-template name="code25-makeChecksum">
					<xsl:with-param name="value" select="$value"/>
				</xsl:call-template>
			</xsl:if>
		</xsl:variable>
		<xsl:variable name="value-encoded">
			<xsl:value-of select="'0000'"/>
			<xsl:call-template name="code25-recursive-coder">
				<xsl:with-param name="value" select="$value-real"/>
			</xsl:call-template>
			<xsl:value-of select="'100'"/>
		</xsl:variable>
		<xsl:call-template name="code25-draw-barcode">
			<xsl:with-param name="sequence" select="$value-encoded"/>
			<xsl:with-param name="string">
				<xsl:choose>
					<xsl:when test="string-length($string)=0">
						<xsl:value-of select="$value-real"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$string"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:with-param>
			<xsl:with-param name="print-text" select="$print-text"/>
			<xsl:with-param name="module" select="$module"/>
			<xsl:with-param name="height" select="$height"/>
			<xsl:with-param name="quiet-horizontal" select="$quiet-horizontal"/>
			<xsl:with-param name="quiet-vertical" select="$quiet-vertical"/>
			<xsl:with-param name="font-family" select="$font-family"/>
			<xsl:with-param name="font-weight" select="$font-weight"/>
			<xsl:with-param name="font-style" select="$font-style"/>
			<xsl:with-param name="font-height" select="$font-height"/>
			<xsl:with-param name="text-color" select="$text-color"/>
			<xsl:with-param name="text-block" select="$text-block"/>
			<xsl:with-param name="barcode-color" select="$barcode-color"/>
			<xsl:with-param name="text-char-space" select="$text-char-space"/>
			<xsl:with-param name="orientation" select="$orientation"/>
			<xsl:with-param name="value" select="$value-real"/>
		</xsl:call-template>
	</xsl:template>
	<xsl:template name="code25-makeChecksum">
		<xsl:param name="value"/>
		<xsl:param name="position" select="2"/>
		<xsl:param name="sum-odd" select="0"/>
		<xsl:param name="sum-even" select="0"/>
		<xsl:choose>
			<xsl:when test="string-length($value) &gt; 0">
				<xsl:variable name="digit" select="substring($value, string-length($value))"/>
				<xsl:call-template name="code25-makeChecksum">
					<xsl:with-param name="value" select="substring($value,1,string-length($value) - 1)"/>
					<xsl:with-param name="sum-odd" select="$sum-odd + $digit*($position mod 2)"/>
					<xsl:with-param name="sum-even" select="$sum-even + $digit*(($position+1) mod 2)"/>
					<xsl:with-param name="position" select="$position + 1"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="(10 - (($sum-odd + 3*$sum-even) mod 10)) mod 10"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="code25-recursive-coder">
		<xsl:param name="value"/>
		<xsl:variable name="digit1" select="document('')//fov:code25-num2bars/entry[@digit=substring($value, 1, 1)]/text()"/>
		<xsl:variable name="digit2" select="document('')//fov:code25-num2bars/entry[@digit=substring($value, 2, 1)]/text()"/>
		<xsl:value-of select="concat(substring($digit1,1,1), substring($digit2,1,1),
                                   substring($digit1,2,1), substring($digit2,2,1),
                                   substring($digit1,3,1), substring($digit2,3,1),
                                   substring($digit1,4,1), substring($digit2,4,1),
                                   substring($digit1,5,1), substring($digit2,5,1))"/>
		<xsl:if test="string-length($value) &gt; 2">
			<xsl:call-template name="code25-recursive-coder">
				<xsl:with-param name="value" select="substring($value,3)"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template>
	<xsl:template name="code25-draw-barcode">
		<xsl:param name="sequence" select="''"/>
		<xsl:param name="string" select="''"/>
		<xsl:param name="print-text" select="'true'"/>
		<xsl:param name="module" select="'0.012in'"/>
		<xsl:param name="wide-to-narrow" select="3.0"/>
		<xsl:param name="height" select="'0.25in'"/>
		<xsl:param name="quiet-horizontal" select="'0.24in'"/>
		<xsl:param name="quiet-vertical" select="'0.06in'"/>
		<xsl:param name="font-family" select="'Courier'"/>
		<xsl:param name="font-weight" select="'normal'"/>
		<xsl:param name="font-style" select="'normal'"/>
		<xsl:param name="font-height" select="'8pt'"/>
		<xsl:param name="text-color" select="'black'"/>
		<xsl:param name="text-block" select="'0'"/>
		<xsl:param name="barcode-color" select="'black'"/>
		<xsl:param name="text-char-space" select="'0'"/>
		<xsl:param name="orientation" select="0"/>
		<xsl:param name="value"/>
		<xsl:variable name="narrow-real">
			<xsl:call-template name="code25-convert-to-basic-units">
				<xsl:with-param name="length" select="$module"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="wide-real" select="round($narrow-real * $wide-to-narrow)"/>
		<xsl:variable name="height-real">
			<xsl:call-template name="code25-convert-to-basic-units">
				<xsl:with-param name="length" select="$height"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="text-block-real">
			<xsl:call-template name="code25-convert-to-basic-units">
				<xsl:with-param name="length" select="$text-block"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="text-char-space-real">
			<xsl:call-template name="code25-convert-to-basic-units">
				<xsl:with-param name="length" select="$text-char-space"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="quiet-horizontal-real">
			<xsl:call-template name="code25-convert-to-basic-units">
				<xsl:with-param name="length" select="$quiet-horizontal"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="quiet-vertical-real">
			<xsl:call-template name="code25-convert-to-basic-units">
				<xsl:with-param name="length" select="$quiet-vertical"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="font-height-real">
			<xsl:call-template name="code25-convert-to-basic-units">
				<xsl:with-param name="length" select="$font-height"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="line-height-real" select="round($font-height-real*1.2)*number($print-text='true')"/>
		<xsl:variable name="length">
			<xsl:value-of select="string-length($sequence)"/>
		</xsl:variable>
		<xsl:variable name="code-width-real" select="$wide-real*(($length - 7)*2 div 5+1) + $narrow-real*(($length - 7)*3 div 5+6)"/>
		<xsl:variable name="area-width-real" select="$code-width-real + 2*$quiet-horizontal-real"/>
		<xsl:variable name="area-height-real" select="$height-real + $line-height-real + 2*$quiet-vertical-real + $text-block-real"/>
		<xsl:variable name="code25-pi" select="3.141592653589793 div 180"/>
		<xsl:variable name="area-width-real-transform">
			<xsl:value-of select="((math:abs(math:cos($orientation  * $code25-pi)) * ($area-width-real div 2)) 
						  + (math:abs(math:sin($orientation  * $code25-pi)) * ($area-height-real div 2))) * 2"/>
		</xsl:variable>
		<xsl:variable name="area-height-real-transform">
			<xsl:value-of select="((math:abs(math:sin($orientation * $code25-pi)) * ($area-width-real div 2)) 
						  + (math:abs(math:cos($orientation * $code25-pi)) * ($area-height-real div 2))) * 2"/>
		</xsl:variable>
		<xsl:variable name="area-x-transform">
			<xsl:value-of select="- math:sin($orientation * $code25-pi) * (($area-height-real-transform - $area-height-real) div 2) + math:cos($orientation * $code25-pi) * (($area-width-real-transform - $area-width-real) div 2)"/>
		</xsl:variable>
		<xsl:variable name="area-y-transform">
			<xsl:value-of select="math:cos($orientation * $code25-pi) * (($area-height-real-transform - $area-height-real) div 2) + math:sin($orientation * $code25-pi) * (($area-width-real-transform - $area-width-real) div 2)"/>
		</xsl:variable>
		<xsl:variable name="area-transform-string">
			<xsl:value-of select="concat('rotate(', - $orientation, ' ', $area-width-real div 2, ' ', $area-height-real div 2,
			') translate(', $area-x-transform, ' ', $area-y-transform, ')')"/>
		</xsl:variable>
		<svg:svg width="{concat($area-width-real-transform div 360, 'mm')}" height="{concat($area-height-real-transform div 360, 'mm')}" viewBox="{concat('0 0 ', $area-width-real-transform, ' ', $area-height-real-transform)}">
			<desc>
				<barcode value="{$value}" type="i2of5"/>
			</desc>
			<svg:g transform="{$area-transform-string}">
				<xsl:variable name="path">
					<xsl:call-template name="code25-recursive-draw">
						<xsl:with-param name="sequence" select="$sequence"/>
						<xsl:with-param name="narrow-real" select="$narrow-real"/>
						<xsl:with-param name="wide-real" select="$wide-real"/>
						<xsl:with-param name="height-real" select="$height-real"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="full-path" select="concat('M ', $quiet-horizontal-real, ' ' , $quiet-vertical-real, $path)"/>
				<svg:path d="{$full-path}" fill="{$barcode-color}"/>
				<xsl:if test="$print-text='true'">
					<svg:text x="{$area-width-real div 2}" y="{$quiet-vertical-real*2 + $height-real + $font-height-real + $text-block-real}" text-anchor="middle" font-family="{$font-family}" font-weight="{$font-weight}" font-style="{$font-style}" font-size="{$font-height-real}" fill="{$text-color}">
						<svg:tspan letter-spacing="{$text-char-space-real}">
							<xsl:value-of select="$string"/>
						</svg:tspan>
					</svg:text>
				</xsl:if>
			</svg:g>
		</svg:svg>
	</xsl:template>
	<xsl:template name="code25-recursive-draw">
		<xsl:param name="sequence"/>
		<xsl:param name="narrow-real"/>
		<xsl:param name="wide-real"/>
		<xsl:param name="height-real"/>
		<xsl:param name="position" select="1"/>
		<xsl:variable name="barstate" select="substring($sequence, 1, 1)"/>
		<xsl:variable name="width">
			<xsl:choose>
				<xsl:when test="$barstate=1">
					<xsl:value-of select="$wide-real"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="$narrow-real"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="($position mod 2) = 1">
				<xsl:value-of select="concat(' l 0 ', $height-real, ' ', $width, ' 0 0 -', $height-real, ' z m ', $width, ' 0')"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(' m ', $width, ' 0')"/>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:if test="string-length($sequence) &gt; 1">
			<xsl:call-template name="code25-recursive-draw">
				<xsl:with-param name="sequence" select="substring($sequence,2)"/>
				<xsl:with-param name="narrow-real" select="$narrow-real"/>
				<xsl:with-param name="wide-real" select="$wide-real"/>
				<xsl:with-param name="height-real" select="$height-real"/>
				<xsl:with-param name="position" select="$position + 1"/>
			</xsl:call-template>
		</xsl:if>
	</xsl:template>
	<xsl:template name="code25-convert-to-basic-units">
		<xsl:param name="length"/>
		<xsl:variable name="length-numeric-value" select="translate ($length, 'ptxcinme ', '')"/>
		<xsl:variable name="length-unit" select="translate ($length, '-0123456789. ', '')"/>
		<xsl:variable name="length-scale-factor">
			<xsl:call-template name="code25-get-unit-scaling-factor">
				<xsl:with-param name="unit" select="$length-unit"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:value-of select="round($length-numeric-value * $length-scale-factor)"/>
	</xsl:template>
	<xsl:template name="code25-get-unit-scaling-factor">
		<xsl:param name="unit"/>
		<xsl:choose>
			<xsl:when test="$unit = 'cm'">3600</xsl:when>
			<xsl:when test="$unit = 'mm'">360</xsl:when>
			<xsl:when test="$unit = 'in'">9144</xsl:when>
			<xsl:when test="$unit = 'pt'">127</xsl:when>
			<xsl:when test="$unit = 'pc'">1524</xsl:when>
			<xsl:when test="$unit = 'em'">
				<xsl:text>1524</xsl:text>
			</xsl:when>
			<xsl:when test="$unit = 'ex'">
				<xsl:text>700</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>360</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<fov:code25-num2bars>
		<entry digit="0">00110</entry>
		<entry digit="1">10001</entry>
		<entry digit="2">01001</entry>
		<entry digit="3">11000</entry>
		<entry digit="4">00101</entry>
		<entry digit="5">10100</entry>
		<entry digit="6">01100</entry>
		<entry digit="7">00011</entry>
		<entry digit="8">10010</entry>
		<entry digit="9">01010</entry>
	</fov:code25-num2bars>

